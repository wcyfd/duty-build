/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aim.duty.duty_build.ui;

import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import com.aim.duty.duty_build.cache.config.MagicConfigCache;
import com.aim.duty.duty_build.cache.config.OreConfigCache;
import com.aim.duty.duty_build.cache.config.PlayCountConfigCache;
import com.aim.duty.duty_build.ui.data.RoleData;
import com.aim.duty.duty_build_entity.navigation.ProtocalId;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.CS_AddBrickToWall;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.CS_ChooseMaterial;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.CS_CreateRole;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.CS_GetResult;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.CS_GetResult.Brick.Magic;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.SC_AddBrickToWall;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.SC_GetResult;
import com.aim.duty.duty_build_entity.protobuf.protocal.Build.SC_GetResult.Brick;
import com.aim.game_base.entity.net.base.Protocal.CS;
import com.aim.game_base.net.SpringContext;
import com.aim.game_base.net.Utils;
import com.aim.game_base.net.WanClient;

/**
 *
 * @author asus
 */
public class MainFrame extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
    	initLayout();
        initComponents();
        initCode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("create architect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setColumns(11);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField2.setColumns(11);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("选择材料");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("选择数量");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("仓库");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("选择材料");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setColumnSelectionAllowed(false);
        jTable1.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("替换砖块");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	EventQueue.invokeLater(new Runnable(){

			@Override
			public void run() {
				// TODO Auto-generated method stub
				String account = jTextField1.getText();
				String name = jTextField2.getText();
				Object obj = jComboBox1.getModel().getElementAt(0);
				if (obj == null) {
					// BuildService buildService =
					// SpringContext.getBean("buildService");
					// buildService.createRole(account, name);
					CS cs = CS.newBuilder().setProtocal(ProtocalId.CREATE_ROLE).setData(
							CS_CreateRole.newBuilder().setAccount(account).setName(name).build().toByteString()).build();
					WanClient buildClient = SpringContext.getBean("buildServer");
					buildClient.send(cs);
				}

			}
    		
    	});
    }      

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		CS_GetResult.Builder csGetResultBuilder = CS_GetResult.newBuilder();
		int count = Utils.getRandomNum(RoleData.num);
		for (int i = 0; i < count; i++) {
			CS_GetResult.Brick.Builder csBrickBuilder = CS_GetResult.Brick.newBuilder();
			Map<Integer, CS_GetResult.Brick.Magic> csMagics = new HashMap<>();

			int magicCount = Utils.getRandomNum(1,4);
			for (int j = 0; j < magicCount; j++) {
				Magic magic = CS_GetResult.Brick.Magic.newBuilder()
						.setDuration(Utils.getRandomNum(20)).setMagicId(Utils.getRandomNum(3))
						.setValue(Utils.getRandomNum(20)).build();
				csMagics.put(magic.getMagicId(), magic);
			}
			csBrickBuilder.putAllMagics(csMagics);
			
			CS_GetResult.Brick csBrick = csBrickBuilder.build();
			
			csGetResultBuilder.addBricks(csBrick);
		}
		WanClient buildClient = SpringContext.getBean("buildServer");
		buildClient.send(CS.newBuilder().setProtocal(ProtocalId.GET_RESULT).setData(csGetResultBuilder.build().toByteString()).build());
		
		
	}
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
		int configId = OreConfigCache.getConfigIdByIndex(jComboBox2.getSelectedIndex());
		int playCount = PlayCountConfigCache.getCounts().get(jComboBox3.getSelectedIndex());
		CS cs = CS.newBuilder().setProtocal(ProtocalId.CHOOSE_MATERIAL).setData(CS_ChooseMaterial.newBuilder()
				.setBrickSourceId(configId).setBrickSourceNum(playCount).build().toByteString()).build();
		WanClient buildClient = SpringContext.getBean("buildServer");
		buildClient.send(cs);
	}

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }       
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				com.aim.duty.duty_build_entity.bo.Brick b = (com.aim.duty.duty_build_entity.bo.Brick) jComboBox4.getSelectedItem();
				
				if (b == null) return;
				DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
				int row = jTable1.getSelectedRow();
				int column = jTable1.getSelectedColumn();
				WanClient buildServer = SpringContext.getBean("buildServer");
				buildServer.send(CS
						.newBuilder()
						.setProtocal(ProtocalId.ADD_BRICK_TO_WALL)
						.setData(
								CS_AddBrickToWall.newBuilder().setPropId(b.getId()).setIndexAtWall(row * 4 + column)
										.build().toByteString()).build());

			}

		});
    	
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration
    
    public javax.swing.JComboBox getjComboBox1() {
		return jComboBox1;
	}    
    
	public void initCode() {
		// TODO Auto-generated method stub
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub				
				DefaultComboBoxModel roleModel = (DefaultComboBoxModel) jComboBox1.getModel();
				roleModel.removeAllElements();
				roleModel.addListDataListener(new ListDataListenerAdapter() {

					@Override
					public void contentsChanged(ListDataEvent e) {
						// TODO Auto-generated method stub
						DefaultComboBoxModel model = (DefaultComboBoxModel) e.getSource();
						int index = model.getIndexOf(model.getSelectedItem());
					}

				});
				jTextField1.setText("1");
				jTextField2.setText("1");
				jTextField1.setEditable(false);
				jTextField2.setEditable(false);

				DefaultComboBoxModel materialModel = (DefaultComboBoxModel) jComboBox2.getModel();
				materialModel.removeAllElements();
				for (String name : OreConfigCache.getNames())
					materialModel.addElement(name);

				materialModel.addListDataListener(new ListDataListenerAdapter() {

					@Override
					public void contentsChanged(ListDataEvent e) {
						// TODO Auto-generated method stub

					}
				});

				DefaultComboBoxModel countModel = (DefaultComboBoxModel) jComboBox3.getModel();
				countModel.removeAllElements();
				for (Integer count : PlayCountConfigCache.getCounts())
					countModel.addElement(count);

				countModel.addListDataListener(new ListDataListenerAdapter() {

					@Override
					public void contentsChanged(ListDataEvent e) {
						// TODO Auto-generated method stub
						
					}
				});

				DefaultComboBoxModel storeModel = (DefaultComboBoxModel) jComboBox4.getModel();
				storeModel.removeAllElements();
				
				storeModel.addListDataListener(new ListDataListenerAdapter(){
					@Override
					public void contentsChanged(ListDataEvent e) {
						// TODO Auto-generated method stub
//						super.contentsChanged(e);
						DefaultComboBoxModel tableModel = (DefaultComboBoxModel)e.getSource();
						final com.aim.duty.duty_build_entity.bo.Brick b = (com.aim.duty.duty_build_entity.bo.Brick) tableModel.getSelectedItem();
						EventQueue.invokeLater(new Runnable(){

							@Override
							public void run() {
								// TODO Auto-generated method stub
								
								if (b == null) {
									jTextArea1.setText("");
									return;
								}
								StringBuilder sb = new StringBuilder();
								sb.append("名称：").append(b).append("\n\n");
								
								for(com.aim.duty.duty_build_entity.po.Magic magic :b.getMagicMap().values()){
									sb.append("魔法:").append(MagicConfigCache.getMagicConfigById(magic.getMagicId()).getName()).append("\n");
									sb.append("持续时间:").append(magic.getDuration()).append("\n");
									sb.append("力量:").append(magic.getValue()).append("\n\n");
								}
								jTextArea1.setText(sb.toString());
							}
							
						});
					}
				});
				
				
			
			}

		});

	}

    private void initLayout() {
		// TODO Auto-generated method stub
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
	}
    
    public void start(final MainFrame frame) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				frame.setVisible(true);
			}
		});
	}

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		List data = (List) arg;
		String message = (String) data.get(0);
		if (message.equals("addRole")) {
			this.addRole();
		}
		else if(message.equals("chooseMaterial")){
			this.chooseMaterial();
		}else if(message.equals("getResult")){
			SC_GetResult result = (SC_GetResult)data.get(1);
			this.getResult(result);
		}else if(message.equals("addBrickIntoWall")){
			SC_AddBrickToWall result= (SC_AddBrickToWall)data.get(1);
			this.addBrickToWall(result);
		}
	}

	private void addBrickToWall(SC_AddBrickToWall result) {
		// TODO Auto-generated method stub
		EventQueue.invokeLater(new Runnable(){

			@Override
			public void run() {
				// TODO Auto-generated method stub
				int column = jTable1.getSelectedColumn();
				int row = jTable1.getSelectedRow();
				if (column == -1 || row == -1) {
					return;
				}
				DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBox4.getModel();
				com.aim.duty.duty_build_entity.bo.Brick brick = (com.aim.duty.duty_build_entity.bo.Brick) jTable1
						.getValueAt(row, column);
				if (brick != null) {
					model.addElement(brick);
				}

				int index = jComboBox4.getSelectedIndex();
				if (index != -1) {
					jTable1.setValueAt(jComboBox4.getSelectedItem(), row, column);
					model.removeElementAt(index);
				}

			}
			
		});
	}

	private void getResult(final SC_GetResult result) {
		// TODO Auto-generated method stub
		EventQueue.invokeLater(new Runnable(){

			@Override
			public void run() {
				// TODO Auto-generated method stub				
				DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBox4.getModel();
				for (Brick brick : result.getBricksList()) {
					com.aim.duty.duty_build_entity.bo.Brick b = new com.aim.duty.duty_build_entity.bo.Brick(){
						@Override
						public String toString() {
							// TODO Auto-generated method stub
							StringBuilder sb= new StringBuilder();
							for(com.aim.duty.duty_build_entity.po.Magic magic:this.getMagicMap().values()){
								sb.append(MagicConfigCache.getMagicConfigById(magic.getMagicId()).getName());								
							}
							sb.append(OreConfigCache.getAllMap().get(this.getMineId()).getName());
							return sb.toString();
						}
					};
					b.setMineId(brick.getMineId());
					b.setId(brick.getId());

					for (SC_GetResult.Brick.Magic magic : brick.getMagicsMap().values()) {
						com.aim.duty.duty_build_entity.po.Magic m = new com.aim.duty.duty_build_entity.po.Magic();
						m.setDuration(magic.getDuration());
						m.setValue(magic.getValue());
						m.setMagicId(magic.getMagicId());
						
						b.getMagicMap().put(magic.getMagicId(), m);
					}
					
					model.addElement(b);

				}
				jButton3.setEnabled(true);
			}
			
		});
	}

	private void chooseMaterial() {
		// TODO Auto-generated method stub
		EventQueue.invokeLater(new Runnable(){
			@Override
			public void run() {
				// TODO Auto-generated method stub
				jButton3.setEnabled(false);
				RoleData.sourceId = OreConfigCache.getConfigIdByIndex(jComboBox2.getSelectedIndex());
				RoleData.num = PlayCountConfigCache.getCounts().get(jComboBox3.getSelectedIndex());
			}
		});
	}

	private void addRole() {
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				
				DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBox1.getModel();
				String name =jTextField2.getText();
				model.addElement(name);
			}
		});
	}
	
	private List<List> roleNameList = new ArrayList<>();
}
